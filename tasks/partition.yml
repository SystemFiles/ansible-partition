---
# Create and modify the partitions

- name: Verify there is the required disks available
  stat:
    path: "{{ item.device }}"
  with_items:
    - "{{ partitions }}"
- name: Unmount device (disks) for partitioning
  mount:
    path: "{{ item.device }}"
    state: unmounted
  with_items:
    - "{{ partitions }}"
- name: Create the partitions as defined
  parted:
      device:  "{{ item.device }}"
      number: "{{ item.number }}"
      part_start: "{{ item.part_start }}"
      part_end: "{{ item.part_end }}"
      part_type: primary
      label: gpt
      align: optimal
      state: present
  with_items:
    - "{{ partitions }}"
- name: Get new partition info
  parted:
    device: "{{ item }}"
    state: info
  register: part_info
  loop: "{{ unique_devices|list }}"
- name: (DEBUG) Show parted info resp
  debug:
    var: part_info
- name: (UNSAFE) Force file system format on all partitions
  shell: mkfs.ext4 "{{ item[0].disk.dev }}{{ item[1] }}.*:ALL"
  loop: "{{ part_info.results|produce(partition_index)|list }}"
# - name: Mount the created partitions
#   mount: 
#     path: "{{ item.1.mount_point }}"
#     src: "{{ item.0.disk.dev }}"
#     fstype: ext4
#     state: mounted
#   loop: "{{ partition_data.results|zip(partitions)|list }}"
# - name: Verify that file ownership and mode unchanged
#   file:
#     path: "{{ item.mount_point }}"
#     owner: "{{ item.mount_point_user }}"
#     group: "{{ item.mount_point_group }}"
#     mode: "{{ item.mount_point_mode }}"
#     state: directory
#     recurse: true
#   with_items:
#     - "{{ partitions }}"
